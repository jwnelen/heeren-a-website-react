{"version":3,"sources":["contents/home.js","components/daltonsListRow/daltonsListRow.js","components/daltonsList/daltonsList.js","data/api.js","components/daltonEditor/daltonEditor.js","contents/daltons.js","components/rating-display/rating-display.js","components/player/player.js","components/playerGrid/playerGrid.js","contents/team.js","components/NavigationBar/navbar.js","components/playerProfile/playerProfile.js","app/App.js","serviceWorker.js","index.js"],"names":["Home","className","Component","DaltonsListRow","props","handleClick","e","console","log","target","id","bind","this","dalton","index","players","person_earned_id","reason","person_took_id","date_earned","moment","locale","format","date_taken","Button","variant","dalton_id","onClick","width","height","viewBox","fill","xmlns","d","fillRule","daltonsList","daltons","items","forEach","push","key","Table","responsive","striped","bordered","hover","size","renderRows","a","fetch","apiUrl","then","response","json","catch","error","result","pairs","i","length","player_id","nickname","Error","info","type","message","JSON","stringify","method","headers","body","ok","getPlayers","getPlayerById","getDaltons","getPlayersIdAndName","getAmountDaltonsPlayer","addDalton","getDaltonById","defaultNewDalton","Daltons","state","isLoading","errors","api","daltonsData","playersData","setState","RatingDisplay","ratingSinglesEndingYear","ratingSingles","ratingDoublesEndingYear","ratingDoubles","Player","href","player","src","alt","name","singles_rating","doubles_rating","singles_rating_ending_year","doubles_rating_ending_year","PlayerList","map","PlayerGrid","Team","playerData","data","NavBar","PlayerProfile","amountDaltonsEarned","match","params","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4421a5f8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass Home extends Component {\r\n\trender() {\r\n\t\t\treturn (\r\n\t\t\t\t\t<div className=\"typewriter\">\r\n\t\t\t\t\t\t<h1 className=\"App-header\">Welcome</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t}\r\n\t}\r\n    \r\nexport default Home\r\n    ","import React, {Component} from 'react';\r\nimport './daltonsListRow.css'\r\nimport Button from 'react-bootstrap/Button'\r\nimport moment from 'moment'\r\nimport 'moment/locale/nl'\r\n\r\nclass DaltonsListRow extends Component {\r\n\tconstructor(props) {\r\n    super(props);\r\n\t\tthis.handleClick = this.handleClick.bind(this);\r\n\t}\r\n\t\r\n\thandleClick = (e) => {\r\n\t\tconsole.log('handle click', e.target.id);\r\n\t}\r\n\t\r\n\trender(props) {\r\n\t\tconst {dalton, index, players} = this.props;\r\n\t\t\r\n\t\treturn(\r\n\t\t<tr>\r\n      <td>{index}</td>\r\n      <td>{players[dalton.person_earned_id] ? players[dalton.person_earned_id] : '-' }</td>\r\n      <td>{dalton.reason}</td>\r\n      <td>{players[dalton.person_took_id]}</td>\r\n      <td>{\r\n\t\t\t\t\tdalton.date_earned ? moment(dalton.date_earned).locale('nl').format('dddd DD MMMM YYYY') : ''}</td>\r\n   \t\t<td>{\r\n\t\t\t\t\tdalton.date_taken ? moment(dalton.date_taken).locale('nl').format('dddd DD MMMM YYYY') : ''}</td>\r\n\t\t\t<td>\r\n\t\t\t\t<Button variant=\"transparent\" id={dalton.dalton_id} onClick={this.handleClick}>\r\n\t\t\t\t\t<svg width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" className=\"bi bi-pencil-square\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n  <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456l-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\"/>\r\n  <path fillRule=\"evenodd\" d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"/>\r\n\t\t\t\t\t</svg>\r\n\t\t\t\t</Button>\r\n\t\t\t</td>\r\n  \t</tr> \r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default DaltonsListRow\r\n\t\t\t\r\n","import React, {Component} from 'react';\r\nimport DaltonsListRow from '../daltonsListRow/daltonsListRow';\r\nimport './daltonsList.css'\r\nimport Table from 'react-bootstrap/Table'\r\n\r\n\r\n\t\t\t\t\t\t\t\r\nclass daltonsList extends Component {\r\n\trenderRows() {\r\n\t\tconst {daltons, players} = this.props;\r\n\t\t\r\n\t\tlet items = [];\r\n\t\tdaltons.forEach( (dalton, index) => {\r\n\t\t\titems.push(<DaltonsListRow players={players} key={index} index={index} dalton={dalton}> </DaltonsListRow>)\r\n\t\t});\r\n\t\t\t\r\n\t\treturn items\r\n\t}\r\n\r\n\trender(props) {\r\n\t\treturn(\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<Table responsive striped bordered hover size=\"sm\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>#</th>\r\n\t\t\t\t\t\t\t<th>Verdiend</th>\r\n\t\t\t\t\t\t\t<th>Reden</th>\r\n\t\t\t\t\t\t\t<th>Genomen door</th>\r\n\t\t\t\t\t\t\t<th>Datum verdient</th>\r\n\t\t\t\t\t\t\t<th>Datum genomen</th>\r\n\t\t\t\t\t\t\t<th>Edit</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{ this.renderRows() }\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</Table>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default daltonsList\r\n\r\n","//const apiUrl = 'http://127.0.0.1:8000/api';\r\nconst apiUrl = '/api';\r\n\r\nasync function getPlayers() {\r\n\treturn fetch(apiUrl + '/players')\r\n\t\t.then(response => response.json())\r\n\t\t.catch((error) => console.log('error in api', error))\t\t\r\n};\r\n\r\nasync function getPlayerById(id) {\t\r\n\treturn fetch(apiUrl + '/players/' + id)\r\n\t\t.then(response => response.json())\r\n\t\t.catch((error) => console.log('error in api', error))\t\t\r\n};\r\n\r\nasync function getPlayersIdAndName() {\t\r\n\treturn fetch(apiUrl + '/players')\r\n\t\t.then(response => response.json())\r\n\t\t.then(result => {\r\n\t\t\t// computing the pairs\r\n\t\t\tlet pairs = {};\r\n\t\t\tfor(let i = 0; i < result.length; i++) {\r\n\t\t\t\tpairs[result[i].player_id] = result[i].nickname\r\n\t\t\t}\r\n\t\t\treturn pairs;\r\n\t\t})\r\n\t\t.catch((error) => console.log('error in api', error))\t\t\r\n\t\t\t\t\t\r\n};\r\n\r\nasync function getDaltons() {\t\r\n\treturn fetch(apiUrl + '/daltons')\r\n\t\t.then(response => response.json())\r\n\t\t.catch((error) => console.log('error in api', error))\t\t\r\n};\r\n\r\nasync function getDaltonById(id) {\r\n\tif(id) {\r\n\treturn fetch(apiUrl + '/daltons/' + id)\r\n\t\t.then(response => response.json())\r\n\t\t.catch((error) => console.log('error in api', error))\t\t\r\n\t} else {\r\n\t\tconst error = new Error();\r\n\t\terror.info = {\r\n\t\t\ttype: 'Error',\r\n\t\t\tmessage: 'Could not edit Dalton: '\r\n\t\t}\r\n\t\treturn (error);\r\n\t}\r\n};\r\n\r\n// TODO\r\nasync function addDalton(dalton) {\t\r\n\tconsole.log('dalton in api function: ' + JSON.stringify(dalton));\r\n\t\r\n\tlet response = await fetch(apiUrl + '/daltons', {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n  \t'Content-type': 'application/json; charset=UTF-8' // Indicates the content \r\n \t\t},\r\n\t\tbody: JSON.stringify(dalton)\r\n\t});\r\n\t\r\n\tlet result = await response;\r\n\t\r\n\tif(response.ok){\r\n\t\treturn result\r\n\t} else {\r\n\t\tconst error = new Error();\r\n\t\terror.info = {\r\n\t\t\ttype: 'Error',\r\n\t\t\tmessage: 'Could not add Dalton: ' + JSON.stringify(dalton)\r\n\t\t}\r\n\t\treturn (error);\r\n\t}\r\n};\r\n\r\nasync function getAmountDaltonsPlayer(id) {\t\r\n\treturn fetch(apiUrl + '/daltons' + '/amountDaltonsEarned/' + id)\r\n\t\t.then(response => response.json())\r\n\t\t.catch((error) => console.log('error in api', error))\t\t\r\n};\r\n\r\n\r\nexport default {\r\n\tgetPlayers, \r\n\tgetPlayerById, \r\n\tgetDaltons, \r\n\tgetPlayersIdAndName, \r\n\tgetAmountDaltonsPlayer,\r\n\taddDalton,\r\n\tgetDaltonById\r\n};\r\n\r\n\r\n","import React, {Component } from 'react';\r\nimport './daltonEditor.css'\r\nimport api from '../../data/api.js'\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nconst defaultNewDalton = {\r\n\t\t\tdate_earned: \"\",\r\n    \tdate_taken: \"\",\r\n\t\t\treason: \"\",\r\n    \tperson_earned_id: \"0\",\r\n\t\t\tperson_took_id: \"0\",\r\n\t\t\tdalton_id: null\r\n\t\t}\r\n\r\nclass daltonEditor extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t\r\n\t\t\r\n\t\tthis.state = {\r\n      daltonData: {},\r\n\t\t\tplayerData: [],\r\n      isLoading: true,\r\n\t\t\terrors: [],\r\n    };\r\n\t\t\r\n\t\tthis.handleInputChange = this.handleInputChange.bind(this);\r\n\t}\r\n\r\n\thandleInputChange(event) {\r\n\t\tconst target = event.target;\r\n\t\t\r\n\t\tlet newDaltonData = this.state.daltonData;\r\n\t\tnewDaltonData[target.id] = target.value;\r\n\t\t\r\n\t\tthis.setState({ \r\n\t\t\t\t\t\t\t\tdaltonData: newDaltonData\r\n\t\t\t\t\t});\r\n\t}\r\n\t\r\n\thandleClick = () => {\r\n\t\tconst dateRegex = /^((?:19|20)\\d\\d)[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])/;\r\n\t\tlet dalton = this.state.daltonData;\r\n\t\t\r\n\t\tlet validDateEarned = dalton.date_earned.length > 0 ? dateRegex.test(dalton.date_earned) : true;\r\n\t\tlet validDateTook = dalton.date_taken.length > 0 ? dateRegex.test(dalton.date_taken) : true;\r\n\t\tlet validReason = dalton.reason.length > 0 && dalton.reason.length < 255;\r\n\t\tlet validPlayerTook = dalton.person_took_id > 0;\r\n\t\t\r\n\t\tconst errorsNew = [];\r\n\t\t\r\n\t\tif(!validDateTook) errorsNew.push('date_taken')\r\n\t\tif(!validDateEarned) errorsNew.push('date_earned')\r\n\t\tif(!validReason) errorsNew.push('reason')\r\n\t\tif(!validPlayerTook) errorsNew.push('person_took_id')\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\terrors: errorsNew\r\n    });\r\n\t\t\r\n\t\tif(errorsNew.length === 0) {\r\n\t\t\tapi.addDalton(this.state.daltonData).then(a => {\r\n\t\t\t\tif(a instanceof Error) alert(a.info.message)\r\n\t\t\t\telse alert('added Dalton!')\r\n\t\t\t});\r\n\t\t\t\r\n//\t\t\twindow.location.reload(false)\r\n\t\t}\r\n\t}\r\n\t\r\n\tisInValid(key) {\r\n\t\treturn this.state.errors.findIndex(keyEl => keyEl === key) !== -1;\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tapi.getPlayers().then(data => {\r\n\t\t\tthis.setState({ \r\n\t\t\t\t\t\t\t\tplayerData: data, \r\n\t\t\t\t\t});\r\n\t\t})\t\t\r\n\t\t\r\n\t\tconsole.log('default dalton : ' + JSON.stringify(defaultNewDalton));\r\n\t\t\r\n\t\tthis.setState({ \r\n\t\t\t\t\t\t\t\tdaltonData: defaultNewDalton, \r\n\t\t\t\t\t\t\t\tisLoading: false \r\n\t\t\t\t\t});\t\t\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps) {\r\n\t\tconsole.log('update props: ' + this.props.dalton_id);\r\n\t\tlet dalton_id = this.props.dalton_id\r\n\t\t\r\n\t\tif(dalton_id !== 0 && prevProps.dalton_id !== dalton_id) {\r\n\t\t\tapi.getDaltonById(this.props.dalton_id).then(data => {\r\n\t\t\t\t\r\n\t\t\t\tconst newDalton = {}\r\n\t\t\t\tnewDalton.date_earned = data[0].date_earned ? data[0].date_earned : ''\r\n\t\t\t\tnewDalton.date_taken = data[0].date_taken ? data[0].date_taken : ''\r\n\t\t\t\tnewDalton.reason = data[0].reason ? data[0].reason : ''\r\n\t\t\t\tnewDalton.person_earned_id = data[0].person_earned_id ? data[0].person_earned_id : '0'\r\n\t\t\t\tnewDalton.person_took_id = data[0].person_took_id ? data[0].person_took_id : '0'\r\n\t\t\t\t\r\n\t\t\t\tthis.setState({ \r\n\t\t\t\t\t\t\t\t\tdaltonData: newDalton, \r\n\t\t\t\t\t\t\t\t\tisLoading: false,\r\n\t\t\t\t\t\t});\r\n\t\t\t}).catch(err => {\r\n\t\t\t\tconsole.log(err.message)\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\trender(props) {\r\n\t\treturn (\r\n\t\t\t<Container>\r\n\t\t\t{ Object.keys(this.state.daltonData).length === 0 ?\r\n\t\t\t\t\t\t\t\t\t<p>no data to display </p> :\r\n\t\t\t\t<Card >\t\r\n\t\t\t \t\t<Card.Header>Featured</Card.Header>\r\n\t\t\t \t\t<Card.Body>\t\t\r\n\t\t\t <Form noValidate>\r\n\t\t\t\t\t{/* FIRST ROW */}\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t\t\t<Form.Label className=\"\" htmlFor=\"inlineFormCustomSelectPref\">\r\n\t\t\t\t\t\t\t\t\tMoet genomen worden door\r\n\t\t\t\t\t\t\t\t</Form.Label>\r\n\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\tid=\"person_took_id\"\r\n\t\t\t\t\t\tonChange={this.handleInputChange}\r\n\t\t\t\t\t\tcustom\r\n\t\t\t\t\t\tclassName='m-0'\r\n\t\t\t\t\t\tisInvalid={this.isInValid('person_took_id')}\r\n\t\t\t\t\t\tvalue={this.state.daltonData.person_took_id}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t<option value={0}>Choose...</option>\r\n\t\t\t\t\t{( \r\n\t\t\t\t\t\t\tthis.state.playerData.map( (player, index) => {\r\n\t\t\t\t\t\t\t\treturn <option \r\n\t\t\t\t\t\t\t\t\tkey={index} \r\n\t\t\t\t\t\t\t\t\tvalue={player.id}\r\n\t\t\t\t\t\t\t\t\t>{player.nickname}\r\n\t\t\t\t\t\t\t\t</option> }\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t )\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t<Form.Control.Feedback type=\"invalid\">\r\n                  Choose your player\r\n            </Form.Control.Feedback>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t<Form.Label>Genomen op (als al genomen)</Form.Label>\r\n\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\tvalue={this.state.daltonData.date_taken} \r\n\t\t\t\t\t\t\tonChange={this.handleInputChange}\r\n\t\t\t\t\t\t\tisInvalid={this.isInValid('date_taken')}\r\n\t\t\t\t\t\t\tid=\"date_taken\"\r\n\t\t\t\t\t\t\tplaceholder=\"2020-01-01\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Form.Control.Feedback type=\"invalid\">\r\n                  Date should be of format YYYY-MM-DD\r\n            </Form.Control.Feedback>\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col md={4}>\r\n\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t<Form.Label>Reason</Form.Label>\r\n\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\tvalue={this.state.daltonData.reason} \r\n\t\t\t\t\t\t\tonChange={this.handleInputChange}\r\n\t\t\t\t\t\t\tid=\"reason\"\r\n\t\t\t\t\t\t\tisInvalid={this.isInValid('reason')}\r\n\t\t\t\t\t\t\tas=\"textarea\" rows=\"1\" />\r\n\t\t\t\t\t\t\t<Form.Control.Feedback type=\"invalid\">\r\n                  Reason should not be empty\r\n            </Form.Control.Feedback>\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t\t\r\n\t\t\t\t\t{/* SECOND ROW */}\r\n\t\t\t\t\t<Row className=\"justify-content-center align-items-start p-3 \">\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t\t<Form.Label className=\"\" htmlFor=\"inlineFormCustomSelectPref\">\r\n\t\t\t\t\t\tVerdiend door\r\n\t\t\t\t\t</Form.Label>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\tid=\"person_earned_id\"\r\n\t\t\t\t\t\tonChange={this.handleInputChange}\r\n\t\t\t\t\t\tcustom\r\n\t\t\t\t\t\tclassName='m-0'\r\n\t\t\t\t\t\tisInvalid={this.isInValid('person_earned_id')}\r\n\t\t\t\t\t\tvalue={this.state.daltonData.person_earned_id}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t<option value={0}>Niemand</option>\t\t\t\t\t\t\r\n\t\t\t\t\t{( \r\n\t\t\t\t\t\t\tthis.state.playerData.map( (player, index) => {\r\n\t\t\t\t\t\t\t\treturn <option \r\n\t\t\t\t\t\t\t\t\tkey={index} \r\n\t\t\t\t\t\t\t\t\tvalue={player.id}\r\n\t\t\t\t\t\t\t\t\t>{player.nickname}\r\n\t\t\t\t\t\t\t\t</option> }\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t )\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t<Form.Control.Feedback type=\"invalid\">\r\n                  Choose your player\r\n            </Form.Control.Feedback>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t<Form.Label>Verdient op</Form.Label>\r\n\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\tvalue={this.state.daltonData.date_earned} \r\n\t\t\t\t\t\t\tonChange={this.handleInputChange}\r\n\t\t\t\t\t\t\tisInvalid={this.isInValid('date_earned')}\r\n\t\t\t\t\t\t\tid=\"date_earned\"\r\n\t\t\t\t\t\t\tplaceholder=\"2020-01-01\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Form.Control.Feedback type=\"invalid\">\r\n                  Date should be of format YYYY-MM-DD\r\n            </Form.Control.Feedback>\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col md={2} className=\"my-auto\">\r\n\t\t\t\t\t <Button variant=\"primary\" onClick={this.handleClick}>Add Dalton</Button>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Form>\r\n\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t</Card>\r\n\t\t\t\t}\r\n\t\t\t</Container>\r\n\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default daltonEditor","import React, { Component } from 'react';\r\nimport DaltonsList from '../components/daltonsList/daltonsList'\r\nimport DaltonEditor from '../components/daltonEditor/daltonEditor'\r\nimport api from '../data/api.js'\r\n\r\nclass Daltons extends Component {\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\tdaltons: [],\r\n\t\t\tplayers: [],\r\n      isLoading: true,\r\n\t\t\terrors: [],\r\n    };\r\n\t}\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tapi.getDaltons().\r\n\t\t\tthen(daltonsData => {\r\n\t\t\t\tif(daltonsData) {\r\n\t\t\t\t\t\t\tapi.getPlayersIdAndName().then(playersData => {\r\n\t\t\t\t\t\t\t\tconsole.log('daltons page mounted with data: ' + JSON.stringify(playersData))\r\n\t\t\t\t\t\t\t\tthis.setState({ \r\n\t\t\t\t\t\t\t\t\tplayers: playersData,\r\n\t\t\t\t\t\t\t\t\tdaltons: daltonsData,\r\n\t\t\t\t\t\t\t\t\tisLoading: false \r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t})\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log('data is undefined')\r\n\t\t\t\t}\r\n\t\t\t})\t\t\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst {isLoading, daltons, players} = this.state;\r\n\t\t\r\n\t\tif(isLoading) {\r\n\t\t\treturn <h3 className='mt-4'>loading...</h3>;\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<h1>Daltons</h1>\r\n\t\t\t\t\t\t<DaltonsList daltons={daltons} players={players}> </DaltonsList>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n    \r\nexport default Daltons\r\n\r\n// TO USE LATER\r\n//\tstate = {\r\n//\t\tdalton_id: 0\r\n//\t}\r\n//\t\r\n//\thandleDaltonChange = (dal_id) => {\r\n//\t\tthis.setState({dalton_id: dal_id})\r\n//\t\tconsole.log('other dalton: ' + dal_id)\r\n//\t}\r\n    \r\n//\t\t\t\t\t\t<DaltonEditor dalton_id={this.state.dalton_id}></DaltonEditor>\r\n//\t\t\t\t\t\t<DaltonsList onSelectDalton={this.handleDaltonChange}></DaltonsList>\r\n","import React, {Component} from 'react';\r\nimport './rating-display.css'\r\n\r\nclass RatingDisplay extends Component {\r\n\trender(props) {\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"rating border\"> \r\n\t\t\t\t\t{this.props.ratingSinglesEndingYear || 6}\r\n\t\t\t\t\t<span className=\"current-rating\">\r\n\t\t\t\t\t\t\t{this.props.ratingSingles || '0.0000'} </span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"rating border\"> \r\n\t\t\t\t\t{this.props.ratingDoublesEndingYear || 6}\r\n\t\t\t\t\t<span className=\"current-rating justify-content-center\">\r\n\t\t\t\t\t\t\t{this.props.ratingDoubles || '0.0000'} </span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default RatingDisplay","import React, {Component} from 'react';\r\nimport './player.css'\r\nimport RatingDisplay from '../rating-display/rating-display.js'\r\n\r\nlet link_fed = \"https://images2.persgroep.net/rcs/SkRGKcrJ4sDaW0oWOoBQKgW9lYA/diocontent/169326362/_fitwidth/694/?appId=21791a8992982cd8da851550a453bd7f&quality=0.8\"\r\n\r\nclass Player extends Component {\r\n\trender(props) {\t\t\t\r\n\t\t\treturn(\r\n\t\t\t\t <div className=\"card player\">\r\n\t\t\t\t\t\t<a href={ \"/players/\" + this.props.player.player_id}><img className=\"card-img-top\" src={link_fed} alt=\"player\"></img></a>\r\n\r\n\t\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t\t\t\t<a href={ \"/players/\" + this.props.player.player_id}><h3 className=\"card-title\">{this.props.player.nickname || \"Nickname\"}</h3> </a>\r\n\t\t\t\t\t\t\t\t<p className=\"card-text text-secondary mb-1 font-italic font-light\" >{this.props.player.name || \"Name\"}</p>\r\n\t\t\t\t\t<ul className=\"list-group list-group-flush\">\r\n\t\t\t\t\t\t<li className=\"list-group-item\"> \r\n\t\t\t\t\t\t\t<RatingDisplay \r\n\t\t\t\t\t\t\t\tratingSingles={this.props.player.singles_rating}\r\n\t\t\t\t\t\t\t\tratingDoubles={this.props.player.doubles_rating}\r\n\t\t\t\t\t\t\t\tratingSinglesEndingYear={this.props.player.singles_rating_ending_year}\r\n\t\t\t\t\t\t\t\tratingDoublesEndingYear={this.props.player.doubles_rating_ending_year}>\r\n\t\t\t\t\t\t\t</RatingDisplay>\r\n\t\t\t\t\t\t</li> \r\n\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div> \r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default Player\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport Player from '../player/player'\r\nimport './playerGrid.css'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\nfunction PlayerList(players) {\r\n\tconst items = players.players.map( (player, index) => \r\n\t\t\t\t<Player className=\"col-6\" \r\n\t\t\t\t\tplayer={player}\r\n\t\t\t\t\tkey={index}/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\treturn items\r\n}\t\t\r\n\r\nclass PlayerGrid extends Component {\r\n\trender(props) {\r\n\t\tconst {players} = this.props;\r\n\t\t\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<div className=\"row justify-content-center\">\r\n\t\t\t\t\t\t<PlayerList players={players}></PlayerList>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default PlayerGrid\r\n\r\n","import React, { Component } from 'react';\r\nimport PlayerGrid from '../components/playerGrid/playerGrid'\r\nimport api from '../data/api.js'\r\n\r\nclass Team extends Component {\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\tplayerData: [],\r\n      isLoading: true,\r\n\t\t\terrors: [],\r\n    };\r\n\t}\r\n\t\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tapi.getPlayers().\r\n\t\t\tthen(data => {\r\n\t\t\t\tif(data) {\r\n\t\t\t\t\tconsole.log('team page mounted with data: ' + JSON.stringify(data))\r\n\t\t\t\t\tthis.setState({ \r\n\t\t\t\t\t\t\t\t\tplayerData: data, \r\n\t\t\t\t\t\t\t\t\tisLoading: false \r\n\t\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log('data is undefined')\r\n\t\t\t\t}\r\n\t\t\t})\t\t\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst {isLoading, playerData} = this.state;\r\n\t\t\r\n\t\tif(isLoading) {\r\n\t\t\treturn <h3 className='mt-4'>loading...</h3>;\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<h1>Team Heeren-A</h1>\r\n\t\t\t\t\t\t<PlayerGrid players={playerData}></PlayerGrid>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t}\r\n\t}\r\n}\r\nexport default Team\r\n    ","import React, {Component} from 'react';\r\nimport './navbar.css'\r\n\r\nclass NavBar extends Component {\r\n    render() {\r\n        return(\r\n           \t<ul className=\"nav justify-content-center\">\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t<a className=\"nav-link active\" href=\"/\">Home</a>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t<a className=\"nav-link\" href=\"/team\">Team</a>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t<a className=\"nav-link\" href=\"/daltons\">Daltons</a>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t</ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar\r\n","import React, {Component} from 'react';\r\nimport './playerProfile.css'\r\nimport api from '../../data/api.js'\r\nimport RatingDisplay from '../rating-display/rating-display.js'\r\n\r\nlet link_fed = \"https://images2.persgroep.net/rcs/SkRGKcrJ4sDaW0oWOoBQKgW9lYA/diocontent/169326362/_fitwidth/694/?appId=21791a8992982cd8da851550a453bd7f&quality=0.8\"\r\n\r\nclass PlayerProfile extends Component {\r\n\t\r\n\tconstructor(props) {\r\n    super(props);\r\n \r\n    this.state = {\r\n      playerData: [],\r\n\t\t\tamountDaltonsEarned: 0,\r\n      isLoading: true,\r\n      error: null,\r\n    };\r\n  }\t\t\t\t\t\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tconst { id } = this.props.match.params\r\n\t\t\r\n\t\tapi.getPlayerById(id).then(data => {\r\n\t\t\tconsole.log('data in component: ' + JSON.stringify(data));\r\n\t\t\tthis.setState({ \r\n\t\t\t\t\t\t\t\tplayerData: data[0]\r\n\t\t\t\t\t});\r\n\t\t})\r\n\t\t\r\n//\t\tapi.getAmountDaltonsPlayer(id).then(data => {\r\n//\t\t\tconsole.log(data);\r\n//\t\t\tlet l = data[0] ? data[0].daltons_earned : 0\r\n//\t\t\tthis.setState({ \r\n//\t\t\t\tamountDaltonsEarned: l,\r\n//\t\t\t\tisLoading: false \r\n//\r\n//\t\t\t})\r\n//\t\t})\r\n\t}\r\n\t\r\n\trender(props) {\r\n\t\tconst player = this.state.playerData;\r\n\t\t\r\n\t\t\treturn(\r\n\t\t\t\t<div className=\"card container\">\r\n\t\t\t\t\t<div className=\"card-body player\">\r\n\t\t\t\t\t\t<img className=\"card-img-top\" src={link_fed} alt=\"player\"></img>\r\n\t\t\t\t\t\t\t\t<h3 className=\"card-title\">{player.nickname || \"Nickname\"}</h3> \t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<p className=\"card-text text-secondary mb-1 font-italic font-light\" >{player.name || \"Name\"}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<ul className=\"list-group list-group-flush\">\r\n\t\t\t\t\t\t<li className=\"list-group-item\">\r\n\t\t\t\t\t\t\t<RatingDisplay\r\n\t\t\t\t\t\t\t\tratingSingles={player.singles_rating}\r\n\t\t\t\t\t\t\t\tratingDoubles={player.doubles_rating}\r\n\t\t\t\t\t\t\t\tratingSinglesEndingYear={player.singles_rating_ending_year}\r\n\t\t\t\t\t\t\t\tratingDoublesEndingYear={player.doubles_rating_ending_year}/>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"list-group-item\">Daltons verdient: {this.state.amountDaltonsEarned || 0}</li>\r\n\t\t\t\t\t\t<li className=\"list-group-item\">Daltons uitgedeeld: {this.state.playerData.amountDaltonsEarned || 0} </li>\r\n\t\t\t\t\t\t<li className=\"list-group-item\">id: {this.state.playerData.player_id} </li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default PlayerProfile\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\nimport Home from '../contents/home.js'\r\nimport Daltons from '../contents/daltons.js'\r\nimport Team from '../contents/team.js'\r\nimport NavBar from '../components/NavigationBar/navbar'\r\nimport PlayerProfile from '../components/playerProfile/playerProfile'\r\n\r\nfunction App() {\r\n\t\r\n\treturn (\r\n    <Router>\r\n    \t<div className=\"App\">\r\n\t\t\t\t<NavBar></NavBar>\r\n\t\t\t\t<Route exact path=\"/\"\r\n\t\t\t\t\tcomponent={Home}>\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/team\"\r\n\t\t\t\t\tcomponent={Team}>\r\n    \t\t</Route>\r\n\t\t\t\t<Route exact path=\"/daltons\"\r\n\t\t\t\t\tcomponent={Daltons}>\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route \r\n\t\t\t\t\tpath=\"/players/:id\"\r\n\t\t\t\t\tcomponent={PlayerProfile}/>\r\n    \t</div>\r\n    </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Importing the Bootstrap CSS\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}